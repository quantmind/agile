## Download source code from github
#
---
- name: Get the timestamp
  set_fact: install_timestamp="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"

- name: Installation directory
  set_fact: install_dir="{{ service_home_path }}/{{ install_timestamp }}"

- debug: var=install_dir

- name: Create installation directory {{ install_dir }}
  file:
    path={{ install_dir }}
    state=directory
    mode=0755
    owner={{ service_user }}

- name: create python {{ python_version }} virtual enviroment in {{ install_dir }}/venv
  shell:
      "{{ python_bin }}/virtualenv --system-site-packages {{ install_dir }}/venv"

- name: Getting source code from {{ github_repository }}@{{ deploy_tag }}
  git:
      dest={{ install_dir }}/repo
      repo={{ github_repository }}
      version={{ deploy_tag }}
      accept_hostkey=True
      recursive=no

- name: configuring services
  template:
    src=config.py.j2
    dest="{{ install_dir }}/repo/{{ item.config }}"
  with_items: "{{ services }}"
  when: item.config is defined and item.name is defined


- name: Install {{ requirement_files }} via pip
  pip:
      virtualenv={{ install_dir }}/venv
      chdir="{{ install_dir }}/repo"
      requirements={{ item }}
  with_items: "{{ requirement_files }}"

- name: npm install project dependencies in {{ install_dir }}/repo
  npm: path={{ install_dir }}/repo
  when: npm_install

- name: setup.py install
  shell: "{{ install_dir }}/venv/bin/python setup.py install"
  args:
    chdir: "{{ install_dir }}/repo"
  when: install_repo

- name: Remove repository {{ install_dir }}/repo
  file:
    path="{{ install_dir }}/repo"
    state=absent
  when: install_repo

- name: Create logrotate configuration.
  template:
    src=lux-logrotate.txt.j2
    dest="/etc/logrotate.d/{{ item.name }}"
  become: yes
  become_user: root
  with_items: "{{ services }}"
  when: item.config is defined and item.name is defined

- name: Change permission to logrotate
  file:
    path="/etc/logrotate.d/{{ item.name }}"
    mode=0644
    owner=root
    group=root
  become: yes
  become_user: root
  with_items: "{{ services }}"
  when: item.config is defined and item.name is defined
